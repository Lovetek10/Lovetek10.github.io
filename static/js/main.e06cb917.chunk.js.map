{"version":3,"sources":["App/Assets/Images/1.png","App/Assets/Images/2.png","App/Assets/Images/3.png","App/Assets/Images/4.png","App/Components/Reuseable/Button.js","App/Components/Minigames/LiarLiar/LiarLiarQuestion.js","App/Components/Minigames/LiarLiar/LiarLiarVoting.js","App/Components/Start/NameSelect.js","App/Components/Start/CharacterSelect/Character.js","App/Components/Start/CharacterSelect/CharacterSelect.js","App/Components/Start/Start.js","App/Components/Minigames/WaitScreen.js","App/Components/Minigames/EverybodyIn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","className","onClick","submitClick","buttonText","LiarLiarQuestion","state","textBoxValue","currentQuestion","currentLie","redirect","textChangeHandler","event","textValue","target","value","_this","setState","axios","post","id","localStorage","getItem","text","then","response","catch","error","console","log","self","this","get","data","question","_this2","react_router","push","to","onChange","autoFocus","maxLength","autoComplete","onKeyPress","key","Reuseable_Button","bind","Component","LiarLiarVoting","isLiar","truthorlie","that","interval","setInterval","HasEveryoneAnswered","NameSelect","Character","img","image","img1","img2","img3","img4","currentlySelectedCharacter","currentlySelected","src","alt","width","characterClick","CharacterSelect","character","CharacterSelect_Character","Start","enterRoom","setItem","Object","assertThisInitialized","toUpperCase","clear","WaitScreen","textToDisplay","newPage","fetchNewPage","resetRedirect","clearInterval","EverybodyIn","countingdown","isEverybodyIn","StartPressed","GameStarted","App","exact","path","component","LiarLiarLying","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e06cb917.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.f2d57d1b.png\";","module.exports = __webpack_public_path__ + \"static/media/2.7800c0fe.png\";","module.exports = __webpack_public_path__ + \"static/media/3.51ddb386.png\";","module.exports = __webpack_public_path__ + \"static/media/4.0f88ca29.png\";","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n\treturn (\r\n        <button className=\"button\" onClick={props.submitClick}>\r\n          {props.buttonText}\r\n        </button>\r\n\t);\r\n}\r\n\r\nexport default Button;","import React, {Component} from \"react\";\r\nimport axios from 'axios';\r\nimport Button from \"../../Reuseable/Button\";\r\nimport { Redirect } from 'react-router-dom'; \r\n\r\nclass LiarLiarQuestion extends Component {\r\n    state = {\r\n        textBoxValue: \"\",\r\n        currentQuestion: \"\",\r\n        currentLie: \"\",\r\n        redirect: false\r\n    };\r\n\r\n    componentWillMount() {\r\n      let self = this;\r\n        axios.get('http://localhost:3001/getplayerdetailsandquestion?id='+ localStorage.getItem(\"PlayerID\"))\r\n         .then(function (response) {\r\n           console.log(response.data);\r\n           self.setState({\r\n             currentQuestion: response.data.question\r\n           })\r\n          })\r\n     .catch(function (error) {\r\n          console.log(error);\r\n  });\r\n    }\r\n\r\n    textChangeHandler = (event) => {\r\n        let textValue = event.target.value;\r\n        this.setState({\r\n            textBoxValue: textValue\r\n        });\r\n\r\n    }\r\n\r\n\r\n    submitClick = () => {\r\n        axios.post('http://localhost:3001/testpost',{\r\n            id: localStorage.getItem(\"PlayerID\"),\r\n            text: this.state.textBoxValue\r\n          })\r\n          .then((response) => {\r\n            this.setState({\r\n                redirect: true\r\n            });\r\n          })\r\n        .catch((error) => {\r\n            console.log(error);\r\n         });\r\n    }\r\n\r\n    render() {\r\n      if(this.state.redirect === true) {\r\n        return <Redirect push to=\"/waitscreen\" />;\r\n    } else {\r\n        return (\r\n            <div className=\"content\">\r\n              <h1 className=\"main-title\">{this.state.currentQuestion}</h1>\r\n                <input\r\n                  className=\"input\"\r\n                  value={this.state.textBoxValue}\r\n                  onChange={event => this.textChangeHandler(event)}\r\n                  autoFocus={true}\r\n                  maxLength=\"22\"\r\n                  autoComplete=\"off\"\r\n                  onKeyPress={event => {\r\n                      if (event.key === 'Enter') {\r\n                        this.submitClick();\r\n                      }\r\n                    }}\r\n                />\r\n            <Button \r\n              submitClick = {this.submitClick.bind(this)}\r\n              buttonText = \"Submit\"\r\n            />\r\n          </div>\r\n        );\r\n            }\r\n    }\r\n}\r\nexport default LiarLiarQuestion;\r\n","import React, {Component} from \"react\";\r\nimport axios from 'axios';\r\nimport Button from \"../../Reuseable/Button\";\r\nimport { Redirect } from 'react-router-dom'; \r\n\r\nclass LiarLiarVoting extends Component {\r\n    state = {\r\n        textBoxValue: \"\",\r\n        currentQuestion: \"\",\r\n        currentLie: \"\",\r\n        redirect: false,\r\n        isLiar: false\r\n    };\r\n    interval;\r\n\r\n    componentWillMount() {\r\n      let that = this;\r\n      axios.get('http://localhost:3001/amiliar?id=' + localStorage.getItem(\"PlayerID\"))\r\n            .then(function (response) {\r\n              if(response.data === true) {\r\n                that.setState({\r\n                  isLiar: true\r\n                });\r\n                that.interval = setInterval(that.HasEveryoneAnswered, 200);\r\n              }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n             });\r\n      }\r\n\r\n      HasEveryoneAnswered() {\r\n        let that = this;\r\n        axios.get('http://localhost:3001/gethaseveryoneanswered')\r\n          .then((response) => {\r\n            if(response.data === \"true\") {\r\n              that.setState({\r\n                  redirect: true\r\n              });\r\n           }\r\n          })\r\n        .catch((error) => {\r\n            console.log(error);\r\n         });\r\n      }\r\n\r\n    submitClick = (truthorlie) => {\r\n      console.log(truthorlie);\r\n        axios.post('http://localhost:3001/settruthorlie',{\r\n            id: localStorage.getItem(\"PlayerID\"),\r\n            truthorlie: truthorlie\r\n          })\r\n          .then((response) => {\r\n            if(response.data === true) {\r\n              this.setState({\r\n                  redirect: true\r\n              });\r\n           }\r\n          })\r\n        .catch((error) => {\r\n            console.log(error);\r\n         });\r\n    }\r\n\r\n    render() {\r\n      if(this.state.redirect === true) {\r\n        return <Redirect push to=\"/waitscreen\" />;\r\n    }  else if(this.state.isLiar === true) {\r\n      return <h1>You are the liar</h1>\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"content\">\r\n              <h1 className=\"main-title\">Make your decision, Truth or Lie?</h1>\r\n              <div className=\"truthorlie-button\">\r\n                <Button \r\n                  submitClick = {() => this.submitClick(\"true\")}\r\n                  buttonText = \"Truth\"\r\n                />\r\n                </div>\r\n              <div className=\"margin-top truthorlie-button\">\r\n                <Button \r\n                  submitClick = {() => this.submitClick(\"false\")}\r\n                  buttonText = \"Lie\"\r\n                />\r\n              </div>  \r\n            </div>\r\n        );\r\n            }\r\n    }\r\n}\r\nexport default LiarLiarVoting;\r\n","import React, {Component} from \"react\";\r\nimport axios from 'axios';\r\nimport Button from \"../Reuseable/Button\";\r\nimport { Redirect } from 'react-router-dom'; \r\n\r\nclass NameSelect extends Component {\r\n  state = {\r\n      textBoxValue: \"\",\r\n      redirect: false\r\n  };\r\n\r\n  // componentDidMount() {\r\n  //     axios.get('http://localhost:3001/test')\r\n  //      .then(function (response) {\r\n  //        console.log(response.data);\r\n  //       })\r\n  //    .catch(function (error) {\r\n  //       console.log(error);\r\n  //   });\r\n  // }\r\n\r\n  textChangeHandler = (event) => {\r\n      let textValue = event.target.value;\r\n      this.setState({\r\n          textBoxValue: textValue\r\n      });\r\n  }\r\n\r\n  submitClick = () => {\r\n    axios.post('http://localhost:3001/setname',{\r\n        id: localStorage.getItem('PlayerID'),\r\n        text: this.state.textBoxValue\r\n      })\r\n      .then((response) => {\r\n        this.setState({\r\n            redirect: true\r\n        });\r\n      })\r\n    .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect push to=\"/characterselect\" />;\r\n    } else {\r\n        return (\r\n            <div className=\"content\">\r\n              <h1 className=\"main-title\">Enter your name</h1>\r\n                <input\r\n            className=\"input\"\r\n            value={this.state.textBoxValue}\r\n            onChange={event => this.textChangeHandler(event)}\r\n            autoFocus={true}\r\n            maxLength=\"22\"\r\n            autoComplete=\"off\"\r\n            onKeyPress={event => {\r\n                if (event.key === 'Enter') {\r\n                  this.submitClick();\r\n                }\r\n              }}\r\n            />\r\n            <Button \r\n              submitClick = {this.submitClick.bind(this)}\r\n              buttonText = \"Submit\"\r\n            />\r\n          </div>\r\n        );\r\n     }\r\n  }\r\n}\r\nexport default NameSelect;\r\n","import React from 'react';\r\nimport img1 from '../../../Assets/Images/1.png';\r\nimport img2 from '../../../Assets/Images/2.png';\r\nimport img3 from '../../../Assets/Images/3.png';\r\nimport img4 from '../../../Assets/Images/4.png';\r\n\r\nconst Character = (props) => {\r\n    let img = \"\";\r\n    switch(props.image) {\r\n        case \"monkey\":\r\n            img = img1;\r\n            break;\r\n        case \"elephant\":\r\n            img = img2;\r\n            break\r\n        case \"rabbit\":\r\n            img = img3;\r\n            break;\r\n        case \"cheetah\":\r\n            img = img4;\r\n            break;\r\n        default: \r\n            img = img1;\r\n            break;\r\n    }\r\n\r\n    const currentlySelected = (props) => {\r\n        if(props.currentlySelectedCharacter === props.image) {\r\n            return \"true\";\r\n        }\r\n        else {\r\n            return \"false\";\r\n        }\r\n    }\r\n\r\n\treturn (\r\n        <div className={\"character-images selected-\" + currentlySelected(props)}>\r\n            <img src={img} alt={\"character\" + props.image} width=\"100px\" onClick={() => props.characterClick(props.image)}></img>\r\n            \r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default Character;","import React, {Component} from \"react\";\r\nimport axios from 'axios';\r\nimport Character from './Character';\r\nimport Button from '../../Reuseable/Button';\r\nimport { Redirect } from 'react-router-dom'; \r\n\r\nclass CharacterSelect extends Component {\r\n    state = {\r\n        textBoxValue: \"\",\r\n        currentlySelectedCharacter: false,\r\n        redirect: false\r\n    };\r\n\r\n\r\n    submitClick = () => {\r\n        axios.post('http://localhost:3001/setcharacter',{\r\n            id: localStorage.getItem('PlayerID'),\r\n            character: this.state.currentlySelectedCharacter\r\n          })\r\n          .then((response) => {\r\n            this.setState({\r\n                redirect: true\r\n            });\r\n          })\r\n        .catch((error) => {\r\n            console.log(error);\r\n         });\r\n    }\r\n\r\n    characterClick = (character) => {\r\n      this.setState({\r\n        currentlySelectedCharacter: character\r\n      })\r\n      console.log(character);\r\n    }\r\n\r\n    render() {\r\n      if (this.state.redirect) {\r\n        return <Redirect push to=\"/everybodyin\" />;\r\n      } else {\r\n        return (\r\n            <div className=\"content\">\r\n              <h1 className=\"main-title\">Choose a Character</h1>\r\n              <div className=\"character-list\">\r\n                <Character \r\n                  image=\"monkey\"\r\n                  characterClick={this.characterClick}\r\n                  currentlySelectedCharacter={this.state.currentlySelectedCharacter}\r\n                />\r\n                <Character \r\n                  image=\"elephant\"\r\n                  characterClick={this.characterClick}\r\n                  currentlySelectedCharacter={this.state.currentlySelectedCharacter}\r\n                />\r\n                <Character \r\n                  image=\"rabbit\"\r\n                  characterClick={this.characterClick}\r\n                  currentlySelectedCharacter={this.state.currentlySelectedCharacter}\r\n                />\r\n                <Character \r\n                  image=\"cheetah\"\r\n                  characterClick={this.characterClick}\r\n                  currentlySelectedCharacter={this.state.currentlySelectedCharacter}\r\n                />\r\n              </div>\r\n\r\n              {this.state.currentlySelectedCharacter ? \r\n              (<div className=\"character-select-button\">\r\n                <Button \r\n                  submitClick = {this.submitClick.bind(this)}\r\n                  buttonText = \"Submit\"\r\n                />\r\n               </div>) : (<div className=\"character-select-button\"></div>) }\r\n            </div>\r\n        );\r\n              }\r\n    }\r\n}\r\nexport default CharacterSelect;","import React, {Component} from 'react';\r\nimport Button from '../Reuseable/Button';\r\nimport { Redirect } from 'react-router-dom'; \r\nimport axios from 'axios';\r\n\r\nclass Start extends Component {\r\n    state = {\r\n        redirect: false,\r\n        textBoxValue: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        localStorage.clear();\r\n    }\r\n\r\n    enterRoom = () => {\r\n        if(!localStorage.getItem('PlayerID')) {\r\n            axios.get('http://localhost:3001/newplayer')\r\n            .then(function (response) {\r\n                    localStorage.setItem('PlayerID', response.data);\r\n                    console.log(response.data);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n             });\r\n        }\r\n        this.setState({\r\n            redirect: true\r\n        });\r\n    }\r\n    \r\n    submitClick = () => {\r\n        let that = this;\r\n        axios.get('http://localhost:3001/checkcode?roomCode=' +this.state.textBoxValue)\r\n            .then(function (response) {\r\n                    if(response.data === true) {\r\n                      that.enterRoom();\r\n                    }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n             });\r\n    }\r\n\r\n    textChangeHandler = (event) => {\r\n        let textValue = event.target.value.toUpperCase();\r\n        this.setState({\r\n            textBoxValue: textValue\r\n        });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        if(this.state.redirect === true) {\r\n            return <Redirect push to=\"/nameselect\" />;\r\n        } else {\r\n            return (\r\n                <div className=\"content\">\r\n                     <h1 className=\"main-title\">Enter the room code on the screen</h1>\r\n                    <input\r\n                    className=\"input\"\r\n                    value={this.state.textBoxValue}\r\n                    onChange={event => this.textChangeHandler(event)}\r\n                    autoFocus={true}\r\n                    maxLength=\"4\"\r\n                    autoComplete=\"off\"\r\n                    onKeyPress={event => {\r\n                        if (event.key === 'Enter') {\r\n                            this.submitClick();\r\n                        }\r\n                        }}\r\n                    />\r\n                    <div>\r\n                        <Button \r\n                            submitClick = {this.submitClick.bind(this)}\r\n                            buttonText = \"Enter room\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default Start;","import React, {Component} from \"react\";\r\nimport axios from 'axios';\r\nimport { Redirect } from 'react-router-dom'; \r\n\r\nclass WaitScreen extends Component {\r\n    interval;\r\n    state = {\r\n        textToDisplay: \"Please wait for everyones answers\",\r\n        redirect: false,\r\n        newPage: \"\"\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.resetRedirect();\r\n        this.interval = setInterval(this.fetchNewPage, 200);\r\n    }\r\n    componentWillUnmount() {\r\n      clearInterval(this.interval);\r\n    }\r\n\r\n    resetRedirect() {\r\n      axios.get('http://localhost:3001/resetredirect')\r\n      .then(function (response) {\r\n        console.log(response);\r\n        })\r\n       .catch(function (error) {\r\n       console.log(error);\r\n       });\r\n  }\r\n    \r\n    fetchNewPage = () => {\r\n      let that = this;\r\n        axios.get('http://localhost:3001/getnextwebpage')\r\n        .then(function (response) {\r\n          console.log(response);\r\n          if(response.data !== \"\") {\r\n            that.setState({\r\n              redirect: true,\r\n              newPage: response.data\r\n            })\r\n          }\r\n         })\r\n         .catch(function (error) {\r\n         console.log(error);\r\n         });\r\n    }\r\n\r\n    render() {\r\n      if(this.state.redirect === true) {\r\n        return <Redirect push to={\"/\" + this.state.newPage} />;\r\n      } else {\r\n          return (\r\n              <div className=\"content\">\r\n                <h1 className=\"main-title\">{this.state.textToDisplay}</h1>\r\n            </div>\r\n          );\r\n            }\r\n    }\r\n}\r\nexport default WaitScreen;\r\n","import React, {Component} from \"react\";\r\nimport axios from 'axios';\r\nimport Button from \"../Reuseable/Button\";\r\nimport { Redirect } from 'react-router-dom'; \r\n\r\nclass EverybodyIn extends Component {  \r\n  state = {\r\n        redirect: false,\r\n        countingdown: false\r\n    };\r\n    interval;\r\n\r\n    componentWillMount() {\r\n      this.isEverybodyIn();\r\n      this.interval = setInterval(this.isEverybodyIn, 500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.interval = clearInterval(this.isEverybodyIn);\r\n    }\r\n\r\n    \r\n    isEverybodyIn = ()=> {\r\n      axios.get('http://localhost:3001/iseverybodyin')\r\n      .then((response) => {\r\n        this.setState({\r\n          countingdown: response.data.StartPressed\r\n        }, () => {\r\n          console.log(response.data.GameStarted);\r\n          if(response.data.GameStarted) {\r\n            clearInterval(this.interval);\r\n            this.setState({\r\n              redirect: true\r\n            });\r\n          }\r\n        });\r\n      })\r\n    .catch((error) => {\r\n        console.log(error);\r\n     });\r\n    }\r\n\r\n    submitClick = () => {\r\n      if(!this.state.countingdown) {\r\n        axios.get('http://localhost:3001/everybodyin')\r\n        .then((response) => {\r\n          console.log(response.data);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n      } else {\r\n        axios.get('http://localhost:3001/everybodynotin')\r\n        .then((response) => {\r\n          console.log(response.data);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n      }\r\n    }\r\n\r\n    // submitClick = () => {\r\n    //   console.log(\"click\");\r\n    //   this.setState({\r\n    //     countingdown: true\r\n    //   }, () => {\r\n    //     if(this.state.countingdown === true) {\r\n    //       console.log(\"countdown\");\r\n    //       const interval = setInterval(() => {\r\n    //         if(this.state.countdown > 0) {\r\n    //           this.setState({\r\n    //             countdown: this.state.countdown -1\r\n    //           });\r\n    //         }\r\n    //         else {\r\n    //           clearInterval(interval);\r\n    //           this.serverRequest();\r\n    //         }\r\n    //       }, 1000);\r\n\r\n    //     } else {\r\n    //       this.setState({\r\n    //         countdown: 3\r\n    //       });\r\n    //     }\r\n    //   });\r\n    // }\r\n      //this.serverRequest();\r\n\r\n    render() {\r\n      if(this.state.redirect === true) {\r\n        return <Redirect push to=\"/liarliar\" />;\r\n    } else {\r\n        return (\r\n            <div className=\"content\">\r\n            <h1>{this.state.countingdown}</h1>\r\n            <Button \r\n              submitClick = {this.submitClick.bind(this)}\r\n              buttonText = {this.state.countingdown ? \"Cancel\" : \"Everybody's In\"}\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n}\r\nexport default EverybodyIn;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch, MemoryRouter } from 'react-router-dom'; \r\nimport LiarLiarQuestion from './App/Components/Minigames/LiarLiar/LiarLiarQuestion';\r\nimport LiarLiarVoting from './App/Components/Minigames/LiarLiar/LiarLiarVoting';\r\nimport NameSelect from './App/Components/Start/NameSelect';\r\nimport CharacterSelect from './App/Components/Start/CharacterSelect/CharacterSelect';\r\nimport Start from './App/Components/Start/Start';\r\nimport WaitScreen from \"./App/Components/Minigames/WaitScreen\";\r\nimport EverybodyIn from \"./App/Components/Minigames/EverybodyIn\";\r\nimport LiarLiarLying from \"./App/Components/Minigames/EverybodyIn\";\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <MemoryRouter>\r\n        <div className=\"page-container\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Start}/>\r\n            <Route exact path=\"/nameselect\" component={NameSelect} />\r\n            <Route exact path=\"/characterselect\" component={CharacterSelect} />\r\n            <Route exact path=\"/liarliar\" component={LiarLiarQuestion}/>\r\n            <Route exact path=\"/liarliarvoting\" component={LiarLiarVoting}/>\r\n            <Route exact path=\"/liarliarlying\" component={LiarLiarLying}/>\r\n            <Route exact path=\"/waitscreen\" component={WaitScreen} />\r\n            <Route exact path=\"/everybodyin\" component={EverybodyIn} />\r\n          </Switch>\r\n        </div>\r\n      </MemoryRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}